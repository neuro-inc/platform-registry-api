apiVersion: apps/v1
kind: Deployment
metadata:
  name: platformregistryapi
spec:
  replicas: {{ .Values.NP_REGISTRY_REPLICAS }}
  selector:
    matchLabels:
      service: platformregistryapi
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        service: platformregistryapi
        annotations:
{{- with .Values.annotations }}
{{ toYaml . | indent 10 }}
{{- end }}
{{- if .Values.secrets }}
         checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
{{- end }}
    spec:
      containers:
      - name: platformregistryapi
        image: {{ .Values.IMAGE }}
        imagePullPolicy: Always
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.NP_REGISTRY_REQUESTS_CPU }}
            memory: {{ .Values.NP_REGISTRY_REQUESTS_MEMORY }}
          limits:
            cpu: {{ .Values.NP_REGISTRY_LIMITS_CPU }}
            memory: {{ .Values.NP_REGISTRY_LIMITS_MEMORY }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: NP_REGISTRY_AUTH_URL
          value: {{ .Values.NP_REGISTRY_AUTH_URL }}
        - name: NP_REGISTRY_AUTH_TOKEN
{{- if .Values.platform.token }}
{{ toYaml .Values.platform.token | indent 10 }}
{{- end }}
        - name: NP_REGISTRY_ZIPKIN_URL
          value: {{ .Values.NP_REGISTRY_ZIPKIN_URL }}
        - name: NP_REGISTRY_ZIPKIN_SAMPLE_RATE
          value: "{{ .Values.NP_REGISTRY_ZIPKIN_SAMPLE_RATE }}"
        - name: NP_REGISTRY_UPSTREAM_TYPE
          value: {{ .Values.upstreamRegistry.type | quote }}
        - name: NP_REGISTRY_UPSTREAM_URL
          value: {{ .Values.upstreamRegistry.url | quote }}
        - name: NP_REGISTRY_UPSTREAM_PROJECT
          value: {{ .Values.upstreamRegistry.project | quote }}
        - name: NP_REGISTRY_UPSTREAM_MAX_CATALOG_ENTRIES
          value: {{ .Values.upstreamRegistry.maxCatalogEntries | quote }}
        - name: NP_CLUSTER_NAME
          value: {{ .Values.NP_CLUSTER_NAME }}
        {{- if eq .Values.upstreamRegistry.type "oauth" }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_SERVICE
          value: {{ .Values.upstreamRegistry.tokenService | quote }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_URL
          value: {{ .Values.upstreamRegistry.tokenUrl | quote }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_USERNAME
{{- if .Values.upstreamRegistry.tokenUsername }}
{{ toYaml .Values.upstreamRegistry.tokenUsername | indent 10 }}
{{- end }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_PASSWORD
{{- if .Values.upstreamRegistry.tokenPassword }}
{{ toYaml .Values.upstreamRegistry.tokenPassword | indent 10 }}
{{- end }}
        {{- if .Values.upstreamRegistry.catalogScope }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_REGISTRY_SCOPE
          value: {{ .Values.upstreamRegistry.catalogScope | quote }}
        {{- end }}
        {{- if .Values.upstreamRegistry.repositoryScopeActions }}
        - name: NP_REGISTRY_UPSTREAM_TOKEN_REPO_SCOPE_ACTIONS
          value: {{ .Values.upstreamRegistry.repositoryScopeActions | quote }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.upstreamRegistry.type "aws_ecr" }}
        - name: AWS_DEFAULT_REGION
          value: {{ .Values.AWS_DEFAULT_REGION }}
        {{- end }}
        {{- if .Values.NP_SENTRY_URL }}
        - name: NP_SENTRY_URL
          value: {{ .Values.NP_SENTRY_URL }}
        {{- end }}
        {{- if .Values.NP_SENTRY_CLUSTER_NAME }}
        - name: NP_SENTRY_CLUSTER_NAME
          value: {{ .Values.NP_SENTRY_CLUSTER_NAME }}
        {{- end }}
      {{- if .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME }}
      imagePullSecrets:
        - name: {{ .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: NEURO_REGISTRYAPI_SESSION
  name: platformregistryapi
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
  selector:
    service: platformregistryapi
{{- if .Values.ingress }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: platformregistryapi-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefix
    {{- if eq .Values.env "dev" }}
    external-dns.platform.neuromation.io: "true"
    {{- end }}
spec:
  rules:
  {{- range .Values.ingress.hosts }}
  - host: {{ .Values.INGRESS_HOST }}
    http:
      paths:
      - path: /
        backend:
          serviceName: platformregistryapi
          servicePort: http
  {{- end }}
{{- end }}
