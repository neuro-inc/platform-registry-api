name: CI

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]
  schedule:
  - cron: 0 4 * * *

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  pre:
    name: Precondition
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    steps:
    - name: Dummy
      run: |
        echo "Ok"

  lint:
    name: Lint
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint

  unit:
    name: Unit tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Run unit tests
      run: make test_unit

  integration:
    name: Integration tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Run integration tests
      run: make test_integration

  e2e:
    name: E2E tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Run E2E tests
      run: make test_e2e

  image-upload:
    name: Upload image artifact
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Docker image
      run: make docker_build
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v21.9.2
      with:
        image: platformregistryapi
        token: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: All checks are passed
    needs:
    - lint
    - unit
    - integration
    - e2e
    - image-upload
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  release:
    name: Release image and heml chart
    needs: check
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: write
      packages: write
      pages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      skip: ${{ steps.meta.outputs.skip }}
      tag: ${{ steps.meta.outputs.tag }}
      prerelease: ${{ steps.meta.outputs.prerelease }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Detect metadata
      id: meta
      run: |
        import re
        import sys

        def dump(val):
          if val:
            return "true"
          else:
            return ""

        ref = "${{ github.ref }}"
        PRE = "refs/tags/"
        if not ref.startswith(PRE):
          print(f"::error:: Ref {ref} doesn't contain a tag")
          sys.exit(1)
        else:
          tag = ref[len(PRE):]

        match = re.match(r"^v\d+\.\d+(\.\d+)?(?P<pre>(a|b|rc)\d*)?$", tag)
        if not match:
          print(
            f"::error:: Invalid tag {tag}; ",
            "The tag should have vYY.MM[.NN][{a|b|rc}N] format ",
            "where YY is the current year, MM is the current month, "
            "NN is incremental number, "
            "every next month resets the number to 0, "
            "a -- alpha, b -- beta, rc -- release candidate, N -- number.",
          )
          sys.exit(1)
        else:
          print(f"::set-output name=tag::{tag}")
          version = tag[1:]
          print(f"::set-output name=version::{version}")
          print(f"::set-output name=prerelease::{dump(match.group('pre'))}")
      shell: python
    - name: Install Helm
      uses: azure/setup-helm@v2.0
      with:
        version: v3.7.0
    - name: Purge old artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ github.token }}
        expire-in: 30mins
    - name: Download image artifact
      uses: actions/download-artifact@v2.1.0
      with:
        name: image
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Load image into docker
      run: |
        docker load --input platformregistryapi.tar
      shell: bash
    - name: Tag remote latest image
      run: |
        docker tag platformregistryapi:latest ghcr.io/neuro-inc/platformregistryapi:latest
      shell: bash
    - name: Tag remote versioned image
      run: |
        docker tag platformregistryapi:latest ghcr.io/neuro-inc/platformregistryapi:${{ steps.meta.outputs.version }}
      shell: bash
    - name: Push latest image to ghcr.io
      run: |
        docker push ghcr.io/neuro-inc/platformregistryapi:latest
      shell: bash
    - name: Push versioned image to ghcr.io
      run: |
        docker push ghcr.io/neuro-inc/platformregistryapi:${{ steps.meta.outputs.version }}
      shell: bash
    - name: Create chart
      run: |
        for HELM_CHART in $CHARTS; do
          VALUES=$(cat charts/${HELM_CHART}/values.yaml | envsubst)
          echo "$VALUES" > charts/${HELM_CHART}/values.yaml
          CHART=$(cat charts/${HELM_CHART}/Chart.yaml | envsubst)
          echo "$CHART" > charts/${HELM_CHART}/Chart.yaml
        done
      env:
        # envs are used by envsubst above
        IMAGE_REPO: ghcr.io/neuro-inc/platformregistryapi
        IMAGE_TAG: ${{ steps.meta.outputs.version }}
        CHART_VERSION: ${{ steps.meta.outputs.version }}
        APP_VERSION: ${{ steps.meta.outputs.version }}
        CHARTS: platform-registry
      shell: bash
    - name: Release chart
      run: |
        echo $CR_TOKEN | helm registry login ghcr.io -u x-access-token --password-stdin
        for HELM_CHART in $CHARTS; do
          helm package charts/${HELM_CHART} -u
          helm push ${HELM_CHART}-${{ steps.meta.outputs.version }}.tgz oci://ghcr.io/neuro-inc/helm-charts
        done
      env:
        HELM_EXPERIMENTAL_OCI: '1'
        CR_TOKEN: ${{ github.token }}
        CHARTS: platform-registry
      shell: bash
    - name: GitHub Release
      uses: ncipollo/release-action@v1.9.0
      with:
        name: ${{ steps.meta.outputs.version }}
        prerelease: ${{ steps.meta.outputs.prerelease }}
        generateReleaseNotes: 'true'
        tag: ${{ steps.meta.outputs.tag }}
        token: ${{ github.token }}
  # release:
  #   name: Create release
  #   needs: check
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
  #   permissions:
  #     actions: write
  #     checks: write
  #     contents: write
  #     deployments: write
  #     id-token: write
  #     issues: write
  #     discussions: write
  #     packages: write
  #     pages: write
  #     pull-requests: write
  #     repository-projects: write
  #     security-events: write
  #     statuses: write
  #   uses: neuro-inc/release-service/.github/workflows/workflow.yaml@master
  #   with:
  #     image: platformregistryapi
  #     helm-charts: platform-registry

  deploy_dev:
    name: Deploy on dev
    environment: dev
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Helm
      uses: azure/setup-helm@v2.0
      with:
        version: v3.7.0
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Update kube config
      run: aws eks --region us-east-1 update-kubeconfig --name aws-dev
    - name: Deploy to kubernetes
      run: |
        helm upgrade platform-registry \
          oc3i://ghcr.io/neuro-inc/helm-charts/platform-registry \
          --version ${{ needs.release.outputs.version }} \
          -f charts/platform-registry/values-dev.yaml \
          --namespace platform --install --wait --timeout 600s
