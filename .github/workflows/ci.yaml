name: CI

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]
  schedule:
  - cron: 0 4 * * *

jobs:
  pre:
    name: Precondition
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    steps:
    - name: Dummy
      run: |
        echo "Ok"

  lint:
    name: Lint
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint

  unit:
    name: Unit tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Run unit tests
      run: make test_unit

  integration:
    name: Integration tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Run integration tests
      run: make test_integration

  e2e:
    name: E2E tests
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Run E2E tests
      run: make test_e2e

  image-upload:
    name: Upload image artifact
    needs: pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.9
    - name: Cache packages
      uses: actions/cache@v2.1.7
      with:
        path: ~/.cache/pip
        key: py-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Docker image
      run: make docker_build
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v21.9.2
      with:
        image: platformregistryapi
        token: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: All checks are passed
    needs:
    - lint
    - unit
    - integration
    - e2e
    - image-upload
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  release:
    name: Create release
    needs: check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions: write-all
    uses: neuro-inc/release-service/workflow.yaml@v0.0.10
    with:
      image: platformregistryapi
      helm-charts: platform-registry

  deploy_dev:
    name: Deploy on dev
    environment: dev
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Helm
      uses: azure/setup-helm@v2.0
      with:
        version: v3.7.0
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Update kube config
      run: aws eks --region us-east-1 update-kubeconfig --name aws-dev
    - name: Deploy to kubernetes
      run: |
        helm upgrade platform-registry \
          oc3i://ghcr.io/neuro-inc/helm-charts/platform-registry \
          --version ${{ needs.release.outputs.version }} \
          -f charts/platform-registry/values-dev.yaml \
          --namespace platform --install --wait --timeout 600s
