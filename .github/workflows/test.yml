name: Continuous Integration

on:
  push:
    branches: [master]
    tags: ['v*.*.*']
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    env:
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AZURE_ACR_NAME: ${{ secrets.AZURE_DEV_ACR_NAME }}
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER_DEV }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8.10"
    - name: Cache packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py-3.8-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
    - name: Install dependencies
      run: make setup
    - name: Configure AWS credentials
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to AWS ECR
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/amazon-ecr-login@v1
    - name: Configure Azure credentials
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Login to Azure ACR
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_DEV_ACR_SERVER }}
        username: ${{ secrets.AZURE_DEV_ACR_USERNAME }}
        password: ${{ secrets.AZURE_DEV_ACR_PASSWORD }}
    - name: Lint
      run: make lint
      env:
        CI_LINT_RUN: 1
    - name: Run unit tests
      run: make test_unit
    - name: Run integration tests
      run: make test_integration
    - name: Run E2E tests
      run: make test_e2e

  release:
    name: Deploy to Artifactory
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      HELM_VERSION: ${{ secrets.HELM_VERSION }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8.10"
    - name: Login to Artifactory docker registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    - name: Push image to Artifactory
      run: make artifactory_docker_push
    - name: Install helm
      run: make helm_install
    - name: Push chart to Artifactory
      run: make artifactory_helm_push

  release_public:
    name: Deploy to Public Artifactory
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_ANONYMOUS_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8.10"
    - name: Login to Artifactory docker registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ARTIFACTORY_ANONYMOUS_DOCKER_REPO }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    - name: Push image to Artifactory
      run: make artifactory_docker_push

  deploy_dev:
    name: Deploy on dev
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AZURE_ACR_NAME: ${{ secrets.AZURE_DEV_ACR_NAME }}
      AZURE_REGION: ${{ secrets.AZURE_DEV_REGION }}
      AZURE_RG_NAME: ${{ secrets.AZURE_DEV_RG_NAME }}
      CLUSTER_NAME: ${{ secrets.DEV_CLUSTER_NAME }}
      HELM_ENV: dev
      HELM_VERSION: ${{ secrets.HELM_VERSION }}
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER_DEV }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8.10"
    - name: Configure AWS credentials
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to AWS ECR
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/amazon-ecr-login@v1
    - name: Configure Azure credentials
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Login to Azure ACR
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_DEV_ACR_SERVER }}
        username: ${{ secrets.AZURE_DEV_ACR_USERNAME }}
        password: ${{ secrets.AZURE_DEV_ACR_PASSWORD }}
    - name: Set tag
      run: echo "TAG=$GITHUB_SHA" >> $GITHUB_ENV
    - name: Push image to registry
      run: make docker_push
    - name: Update kube config
      run: make ${{ env.CLOUD_PROVIDER }}_k8s_login
    - name: Install helm
      run: make helm_install
    - name: Deploy to kubernetes
      run: make helm_deploy
