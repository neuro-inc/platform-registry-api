name: Continuous Integration

on: [push]

jobs:
  test:
    name: Run tests

    runs-on: ubuntu-latest

    env:
      DEVPI_HOST: ${{ secrets.DEVPI_HOST }}
      DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      DEVPI_PASS: ${{ secrets.DEVPI_PASS }}
      DEVPI_USER: ${{ secrets.DEVPI_USER }}
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}


    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.5"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.5-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Setup Google Cloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      - name: Configure Docker client
        run: make -s gke_login
      - name: Lint
        run: make lint_after_building
      - name: Run unit tests
        run: make test_unit
      - name: Run integration tests
        run: make test_integration
      - name: Run E2E tests
        run: make test_e2e

  aws_test:
    name: Run AWS tests

    runs-on: ubuntu-latest

    env:
      DEVPI_HOST: ${{ secrets.DEVPI_HOST }}
      DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      DEVPI_PASS: ${{ secrets.DEVPI_PASS }}
      DEVPI_USER: ${{ secrets.DEVPI_USER }}
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}
      AWS_CLUSTER: present
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}


    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.5"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.5-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Lint
        run: make lint_after_building
      - name: Run unit tests
        run: make test_unit
      - name: Run integration tests
        run: make test_integration
      - name: Run E2E tests
        run: make test_e2e


  artifactory_deploy:
    name: Deploy to Artifactory
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    env:
      DEVPI_HOST: ${{ secrets.DEVPI_HOST }}
      DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      DEVPI_PASS: ${{ secrets.DEVPI_PASS }}
      DEVPI_USER: ${{ secrets.DEVPI_USER }}
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}
      AWS_CLUSTER: present
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}


    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Get GitHub tag as CIRCLE_TAG
        run: echo ::set-env name=CIRCLE_TAG::${GITHUB_REF#refs/*/}
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.5"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.5-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Artifactory Docker Push
        run: make artifactory_docker_push
      - name: Artifactory Helm Push
        run: make artifactory_helm_push


  gke_deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    env:
      DEVPI_HOST: ${{ secrets.DEVPI_HOST }}
      DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      DEVPI_PASS: ${{ secrets.DEVPI_PASS }}
      DEVPI_USER: ${{ secrets.DEVPI_USER }}
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      CLUSTER_ZONE_REGION: ${{ secrets.CLUSTER_ZONE_REGION }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}
      AWS_CLUSTER: present
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      HELM_ENV: ${{ secrets.HELM_ENV }}


    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Get GitHub tag as CIRCLE_TAG
        run: echo ::set-env name=CIRCLE_TAG::${GITHUB_REF#refs/tags/}
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.5"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.5-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Setup Google Cloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      - name: Configure Docker client
        run: make -s gke_login
      - name: GKE Docker Push
        run: make gke_docker_push
      - name: GKE K8S Deploy
        run: make gke_k8s_deploy


  deploy_aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/an/workflows')

    env:
      DEVPI_HOST: ${{ secrets.DEVPI_HOST }}
      DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      DEVPI_PASS: ${{ secrets.DEVPI_PASS }}
      DEVPI_USER: ${{ secrets.DEVPI_USER }}
      GKE_ACCT_AUTH: ${{ secrets.GKE_ACCT_AUTH }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_DOCKER_REGISTRY: ${{ secrets.GKE_DOCKER_REGISTRY }}
      SET_CLUSTER_ZONE_REGION: ${{ secrets.SET_CLUSTER_ZONE_REGION }}
      AWS_CLUSTER: present
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.5"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.5-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: AWS Docker Push
        run: make aws_docker_push
      - name: AWS K8s Deploy
        run: make aws_k8s_deploy
