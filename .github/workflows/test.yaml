on:
  workflow_call: {}

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout commit
      uses: actions/checkout@v5
    - name: Install Python
      uses: actions/setup-python@v6
      with:
        python-version-file: .python-version
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint

  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v5
    - name: Install python
      uses: actions/setup-python@v6
      with:
        python-version-file: .python-version
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Run unit tests
      run: make test_unit

  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v5
    - name: Install python
      uses: actions/setup-python@v6
      with:
        python-version-file: .python-version
    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Run integration tests
      run: make test_integration

  e2e:
    name: E2E tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v5
    - name: Install python
      uses: actions/setup-python@v6
      with:
        python-version-file: .python-version
    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Run E2E tests
      run: make test_e2e

  image-upload:
    name: Upload image artifact
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v5
    - name: Install python
      uses: actions/setup-python@v6
      with:
        python-version-file: .python-version
    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Build Docker image
      run: make docker_build
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v24.4.0
      with:
        image: platformregistryapi
        token: ${{ github.token }}

  check:
    name: Check
    needs:
    - lint
    - unit
    - integration
    - e2e
    - image-upload
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
